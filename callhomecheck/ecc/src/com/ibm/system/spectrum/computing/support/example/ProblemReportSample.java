package com.ibm.system.spectrum.computing.support.example;
import java.io.File;
import java.math.BigInteger;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;

import com.ibm.ecc.common.Config;
import com.ibm.ecc.common.ECCException;
import com.ibm.ecc.common.ECCExceptionIfc;
import com.ibm.ecc.problemreportingservice.FileUploadCallbackIfc;
import com.ibm.ecc.problemreportingservice.ProblemReportContext;
import com.ibm.ecc.problemreportingservice.ProblemReportContextState;
import com.ibm.ecc.problemreportingservice.ProblemReportData;
import com.ibm.ecc.problemreportingservice.UnstructuredData;
import com.ibm.ecc.protocol.Address;
import com.ibm.ecc.protocol.Contact;
import com.ibm.ecc.protocol.DataPortPreference;
import com.ibm.ecc.protocol.DataType;
import com.ibm.ecc.protocol.DataPort;
import com.ibm.ecc.protocol.Descriptor;
import com.ibm.ecc.protocol.Fault;
import com.ibm.ecc.protocol.FaultDetail;
import com.ibm.ecc.protocol.Identity;
import com.ibm.ecc.protocol.IdentityType;
import com.ibm.ecc.protocol.Telephone;
import com.ibm.ecc.protocol.problemreport.ProblemReportRichNotes;
import com.ibm.ecc.protocol.problemreport.ProblemType;
import com.ibm.ecc.protocol.problemreport.ServiceProviderReport;
import com.ibm.system.spectrum.computing.support.PlatformSymphony;
import com.ibm.ecc.protocol.Transport;

/*
 * This is the old version of eccagent.
 * User needs to put arguments in specific sequence when call eccagent to create PMR 
 * 
*/

public class ProblemReportSample{
	
	//Descriptor => by John
	//static String DESCRIPTOR = "data/ibm.problem.ecurep";
	
	//Descriptor => by Rose
	//static String DESCRIPTOR = "data/ibm.problem.ecurep";
	static String DESCRIPTOR = "ibm/problem.ecurep";
	
	 
	public static void main(String [] args) {
		try{
			
			/*
			 * 0 = ECC HOME; libs for ecc client, e.g. c:\\ecchome\\eccRootDirectory 
			 * 1 = Component ID (IBM/*********); For test SYM = IBM/5725G8601; LSF = IBM/5725G8201
			 * 2 = Version (611, 71, 711, 911, 912, 913, etc.)
			 * 3 = Customer Number (Customer ICN); For test use DS12IEE
			 * 4 = UUID (UUID for the cluster instance, can use a pseduo one, e.g."1234567890")
			 * 5 = Customer Name; e.g. "John Smith"
			 * 6 = IDENTIFIER, GROUP_NAME or PRODUCT_CID. For test environment, use GROUP; SYM = "IBM/SPECTRUM_SYM" LSF = "IBM/SPECTRUM_LSF"
			 * 7 = Customer phone number; e.g. "9053161550"
			 * 8 = Severity; 1,2,3,4
			 * 9 = Country; For test only use "US" since it needs coordinate to customer record
			 * 10 = CITY; e.g. "New York"
			 * 11 = PMR Comment Line (title); e.g. "Symphony 7.1.1 {ACE} libraries"
			 * 12 = PMR Start line; e.g. "This is a test PMR, please ignore"
			 * 13 = A gzip file to be uploaded; e.g. "/scratch/supsym/erikwang/symclnt-lnx26-lib23-x64-6.1.1_build241698.tar.gz"
			 * 14 = debug flag; default = false
			*/
			
			
			Boolean DEBUGFLAG = true;
			
			String ECCHOME;
			String COMPONENT_ID;
			String VERSION;
			String CUSTOMER_ICN;
			String UUID;
			String CUSTOMER_NAME;
			String IDENTIFIER;
			String CUSTOMER_PHONE;
			String SERVERITY;
			String COUNTRY;
			String CITY;
			String PMR_COMMENT_LINE;
			String PMR_START_LINE;
			String FILE_TO_UPLOAD;
			
			if(args.length >= 13 ){
				System.out.println("Get conf from submit command....");
				ECCHOME = args[0];
				COMPONENT_ID = args[1];
				VERSION = args[2];
				CUSTOMER_ICN = args[3];
				UUID = args[4];
				CUSTOMER_NAME = args[5];
				IDENTIFIER = args[6];
				CUSTOMER_PHONE = args[7];
				SERVERITY = args[8];
				COUNTRY = args[9];
				CITY = args[10];
				PMR_COMMENT_LINE = args[11];
				PMR_START_LINE = args[12];
				FILE_TO_UPLOAD = args[13];
				if (args.length > 13){
					if (args[14].equals("false") || args[14] == null){
						DEBUGFLAG = false;
					}	
				}
			}else{
				ECCHOME = "/scratch/supsym/erikwang/temp/ecchome";
				//ECCHOME = "c:\\ecchome\\eccRootDirectory";  
				COMPONENT_ID = "IBM/5725G8601";
				VERSION = "710";
				CUSTOMER_ICN = "DS12IEE";
				UUID = "2012201320142015";
				CUSTOMER_NAME = "IBM System";
				IDENTIFIER = "IBM/SPECTRUM_SYM";
				CUSTOMER_PHONE = "Randy Marsh";
				SERVERITY = "4";
				COUNTRY = "US";
				CITY = "SOUTHPARK";
				PMR_COMMENT_LINE = "Symphony 7.1.1 {ACE} libraries";
				PMR_START_LINE = "This is a test PMR generated by eccclient from IBM Spectrum Computing Support team.";
				FILE_TO_UPLOAD = "/scratch/supsym/erikwang/serviceProviderTestV2.gzip";
				//FILE_TO_UPLOAD = "c:\\wsdl.jar";
			}
			
			File rdd = new File(ECCHOME);
			if(DEBUGFLAG){
				showConf(args);
			}
			
			Config.setRootDataDirectory(rdd);
	
			 // First create the identity we're going to pass as the subject.
			 Identity subject = new Identity();
			 subject.setType(IdentityType.software);
			 	
			 //// Sym Component ID
			 //subject.setProduct("IBM/5725G8601");
			 subject.setProduct(COMPONENT_ID);
			 
			 //subject.setVersion("611");
			 subject.setVersion(VERSION);
		 			 
			 String[] customerNumber = new String[1];
			 //customerNumber[0] = "6031706";
			 //customerNumber[0] = "2952653";

			 //For test IEPD, use an existed customer ID "DS12IEE"
			 customerNumber[0] = CUSTOMER_ICN;
			 subject.setCustomerNumber(customerNumber);
			 
			 subject.setUuid(UUID);
			 subject.setCountry(COUNTRY);
			 
			 
			 // Identity for the submitter
			 Identity submitter = new Identity();
			 submitter.setType(IdentityType.software);
			 submitter.setProduct(COMPONENT_ID);
			 submitter.setUuid(UUID);
			 submitter.setName(CUSTOMER_NAME);
			 		
			 // Set the environment group
			 Identity envGroup = new Identity();
			 envGroup.setType(IdentityType.group);
			 envGroup.setProduct(IDENTIFIER);
						 
			 // Set the contact information
			 Contact[] contacts = new Contact[1];
			 Contact contact = new Contact();
			 contacts[0] = contact;
			 contact.setName(CUSTOMER_NAME);
			 Telephone[] telephones = new Telephone[1];
			 Telephone telephone = new Telephone();
			 telephone.setNumber(CUSTOMER_PHONE);
			 telephones[0] = telephone;
			 contact.setVoice(telephones);
	
			 // Set the environment hardware 
			 //NOT SURE WHY IT NEED A HW INFO HERE
			 Identity envHardware = new Identity();
			 envHardware.setType(IdentityType.hardware);
			 envHardware.setProduct("IBM/UNKW/DSW");
			 envHardware.setSerialNumber("8008800");
			 
			 //
			 Identity[] envs = new Identity[2]; 
			 envs[0] = envGroup;
			 envs[1] = envHardware;

			 // Set the problem type
			 ProblemType[] problemTypes = new ProblemType[1];
			 problemTypes[0] = ProblemType.errorIndication;
	
			 // Merge all the data into the problem report
			 ProblemReportContext prc = new ProblemReportContext();
			 
			 prc.setSubject(subject); // thing that's broken
			
			 // Create an address
			 Address address = new Address();
			 address.setCountry(COUNTRY);
			 //address.setCity("Markham");
	
			 prc.setSubjectLocation(address);
			 	 
			 //////////////////
			 prc.setSubjectEnvironment(envs); 
			 //////////////////
			 
			 prc.setProblemType(problemTypes);
			 prc.setSeverity(new BigInteger(SERVERITY));
	
			 ProblemReportRichNotes[] prrns = new ProblemReportRichNotes[1];
			 ProblemReportRichNotes prrn = new ProblemReportRichNotes();
			 prrn.setCategory("Normal");
			 prrn.setNotes(PMR_START_LINE);
			 prrns[0] = prrn;
	
			 prc.setProblemReportRichNotes(prrns);
			 prc.setSubmitter(submitter); 
			 prc.setContact(contacts);
			 prc.setProblemDescription(PMR_COMMENT_LINE);
			 prc.setTest(new Boolean(true));
			
			 //////Submit the report - 1st time
			 prc.submitReport();
			 
			 //get new PMR ID
			 ServiceProviderReport[] spr_array = prc.getServiceProviderReport();
			 if (spr_array != null && spr_array.length !=0){
				 System.out.println("PMR ID = " + spr_array[0].getId());
			 }
			 
			 if(DEBUGFLAG){
				 printProgress(prc); 
			 }
	
			////Prepare a filename to be uploaded
			//String filename = rdd + "\\" + "TESTFILE-" + Calendar.getInstance().getTimeInMillis() + ".txt";
			 //String filename = rdd + "\\" + "serviceProviderIBM.gzip";
			if(DEBUGFLAG){
				System.out.println("Upload file name: "+FILE_TO_UPLOAD);
			}
			
			PlatformSymphony ps = new PlatformSymphony();
			prc.attach(createTier3Data(ps,60000000,FILE_TO_UPLOAD,COMPONENT_ID,VERSION));
			if(DEBUGFLAG){
				 printProgress(prc); 
			}
			prc.refresh();
			if(DEBUGFLAG){
				 printProgress(prc); 
			}
			
		}
		catch(ECCException ex) {
			ex.printStackTrace();
		}
	}

	public static ProblemReportData createTier3Data(FileUploadCallbackIfc obj){
		  return createTier3Data(obj,1234,null,null,null);
	 }

	 public static ProblemReportData createTier3Data(FileUploadCallbackIfc obj, long size, String file2upload,String product, String version){
	    Identity author = new Identity();
	    author.setProduct(product);
	    author.setVersion(version);
	    author.setPlatform("Linux/Unix");
    
	    File test_file = new File(file2upload);
	    UnstructuredData ud = new UnstructuredData(test_file);
	    ProblemReportData prd = null;
	    Descriptor descriptor = new Descriptor();
	    //descriptor.set_value("data/ibm.eccedge.indirect+direct.uritype");	// [John] This is the ECC Testcase descriptor, you will need to get your own from the BDSR team, ask Rose Sundermeyer.  [Rose] Agree.  You need to set this to your own descriptor or to the generic version we talked about:  ibm/problem.ecurep
	    
	    //Suggested by 
	    descriptor.set_value(DESCRIPTOR);
	    
	    DataType dataType = new DataType();
	    dataType.set_value("text file");
	    //dataType.set_value("application/x-gzip");
	    
	    try {
	    	prd = new ProblemReportData(ud, ud.toString(), descriptor, dataType, ud.toString(), obj);  
	    } catch(ECCException ex) { 
	    	System.out.println(ex.toString()); 
	    }
	    
	    ProblemReportRichNotes[] prrn = new ProblemReportRichNotes[1]; 
	    prrn[0] = new ProblemReportRichNotes();
	    prrn[0].setDateTime(Calendar.getInstance());
	    prrn[0].setAuthor(author);
	    
	    prd.setProblemReportRichNotes(prrn);
	    return prd;
	  }


	public static void printProgress(ProblemReportContext prc){
		ProblemReportContextState state = prc.getContextState();
		System.out.println("State is " + state);
		if (state == ProblemReportContextState.processing){
			ServiceProviderReport[] spr_array = prc.getServiceProviderReport();
			spr_array = prc.getServiceProviderReport();
			if (spr_array != null && spr_array.length !=0){
				System.out.println("srid = " + spr_array[0].getId());
			}
		} else if (state == ProblemReportContextState.error){
			printExceptions(prc);
	}
}
	 
	
 public static void printExceptions(ProblemReportContext prc) {
	 ECCExceptionIfc[] exception_array = prc.getExceptions();
	 if (exception_array != null) {
		 for (int i = 0; i < exception_array.length; i++) {
			 System.out.println("Exception[" + i + "][" + exception_array[i] + "]");
			 Throwable t = getCause(exception_array[i]);
			 if (t != null)	{
				 System.out.println("Cause[" + i + "][" + t + "]");
				 if (t instanceof Fault) printFault((Fault) t);
				 else t.printStackTrace();
			 }
		 }
	 }
 }

 public static void printFault(Fault f){
	 if (f == null) return;
	 System.out.println("Subcode = " + f.getSubcode());
	 System.out.println("Description = " + f.getDescription());
	 printFaultDetail(f.getDetail());
 }

 public static void printFaultDetail(FaultDetail fd) {
	 if (fd == null) return;
	 printCal("DateTime = ", fd.getDateTime());
	 printStringArray("FaultDetail", fd.getExtendedData());
	 printFault(fd.getNestedFault());
	 System.out.println("TransactionId = " + fd.getTransactionId());
 }

 public static void printCal(String label, Calendar cal)
 {
 if (cal == null) return;

 DateFormat format = new SimpleDateFormat("MM/dd/yyyy kk:mm:ss z");
 String time_string = format.format(cal.getTime());
 System.out.println(label + time_string);
 }

 public static void printStringArray(String label, String[] sa) {
	 if (sa == null) return;
	 for (int i = 0; i < sa.length; i++)
		 System.out.println(label + "[" + i + "] = " + sa[i]);
 }
 
 public static Throwable getCause(ECCExceptionIfc exception) {
	 Throwable t = null;
	 try{
		 t = exception.toThrowable();
	 }catch (NoSuchMethodError ex) {
		 System.out.println("toThrowable function not available");
		 return null;
	 }
	 return t.getCause();
 }
 
 public static void showConf(String[] args){
	 for (int t = 0; t< args.length; t++){
		 System.out.println("args["+t+"] = "+args[t]); 
	 }
	 
 } 

}